trigger:
  branches:
    include:
      - main

variables:
  VM_IP_PUBLICA: "20.62.41.93" # IP pública de la máquina virtual
  IMAGE_NAME: "myapp-nginx-s4" # Nombre de la imagen
  ACR_NAME: "myappdevopsciac" # Nombre del Azure Container Registry (ACR)
  ACR_USERNAME: "myappdevopsciac" # Nombre de usuario del ACR
  ACR_PASSWORD: "0WyU0MaS6Uzh8b3w4TRtpJU7iHEOZyyIA5w6Jk3AN6+ACRCPnu8c" # Contraseña del ACR

stages:
  - stage: Deploy
    jobs:
      - deployment: DeployToVM
        displayName: "Deploy to VM"
        environment:
          name: "VM-DEVOPS-SUM2" # Nombre del entorno configurado en Azure DevOps
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    # Verificar e instalar Azure CLI en la máquina virtual
                    if ! command -v az &> /dev/null; then
                      echo "Azure CLI no está instalado. Instalando Azure CLI..."
                      export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && \
                      sudo apt-get install -y curl && \
                      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash && \
                      az --version
                    else
                      echo "Azure CLI ya está instalado."
                    fi
                  displayName: "Verificar e Instalar Azure CLI"
                  failOnStderr: true

                - script: |
                    # Verificar si hay paquetes en estado interrumpido
                    sudo dpkg --configure -a
                    
                    # Verificar e instalar Docker en la máquina virtual
                    if ! command -v docker &> /dev/null; then
                      echo "Docker no está instalado. Instalando Docker..."
                      export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && \
                      sudo apt-get install -y \
                        apt-transport-https \
                        ca-certificates \
                        curl \
                        gnupg \
                        lsb-release && \
                      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
                      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
                      sudo apt-get update && \
                      sudo apt-get install -y --no-install-recommends docker-ce docker-ce-cli containerd.io && \
                      sudo systemctl start docker && \
                      sudo systemctl enable docker && \
                      sudo docker --version
                    else
                      echo "Docker ya está instalado."
                    fi
                  displayName: "Verificar e Instalar Docker"
                  failOnStderr: true

                - script: |
                    # Autenticarse en Azure Container Registry utilizando nombre de usuario y contraseña
                    echo "Autenticándose en Azure Container Registry y ejecutando la imagen Docker..."
                    echo ${ACR_PASSWORD} | sudo docker login ${ACR_NAME}.azurecr.io -u ${ACR_USERNAME} --password-stdin > /dev/null 2>&1

                    # Descargar la imagen desde ACR
                    sudo docker pull ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:latest

                    # Verificar si el contenedor ya está en ejecución
                    if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^nginx_container\$"; then
                      echo "El contenedor 'nginx_container' ya existe. Iniciándolo nuevamente..."
                      sudo docker start nginx_container
                    else
                      echo "El contenedor 'nginx_container' no existe. Creándolo y ejecutándolo..."
                      sudo docker run -d -p 80:80 --name nginx_container ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:latest
                    fi

                    sudo docker ps
                  displayName: "Descargar y ejecutar la imagen Nginx desde ACR"
                  failOnStderr: true

                - script: |
                    # Mostrar la URL para acceder a Nginx
                    echo "La URL para acceder a Nginx es: http://${VM_IP_PUBLICA}/"
                  displayName: "Mostrar URL de la máquina virtual"
